datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String        @id @default(uuid()) @db.Uuid
  email            String        @unique
  password         String?
  firstName        String?
  lastName         String?
  birthDate        DateTime?
  image            String?
  isRceivedMessage Boolean       @default(false)
  emailVerified    DateTime?
  rooms            Room[]
  reservations     Reservation[]
  reviews          Review[]
  accounts         Account[]
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Room {
  id             String     @id @default(uuid()) @db.Uuid
  name           String
  country        String
  lat            Float
  lng            Float
  images         Image[]
  maxGuests      Int
  bedroomNumber  Int
  bedNumber      Int
  bathNumber     Int
  price          Int
  detail         String?
  maxReservation Int
  allowAnimal    Boolean
  offering       Offering[]
  review         Review[]
  owner          User?      @relation(fields: [ownerId], references: [id])
  ownerId        String?    @db.Uuid
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Image {
  id     String  @id @default(uuid()) @db.Uuid
  path   String
  roomId String? @db.Uuid
  room   Room?   @relation(fields: [roomId], references: [id])
}

model Offering {
  id            String      @id @default(uuid()) @db.Uuid
  lutOffering   LutOffering @relation(fields: [lutOfferingId], references: [id])
  lutOfferingId Int
  room          Room?       @relation(fields: [roomId], references: [id])
  roomId        String?     @db.Uuid
}

model LutOffering {
  id       Int        @id @unique @default(autoincrement())
  name     String
  icon     String
  offering Offering[]
}

model Reservation {
  id             String   @id @default(uuid()) @db.Uuid
  checkInDate    DateTime
  checkOutDate   DateTime
  adultNumber    Int
  childrenNumber Int
  infactNumber   Int
  petNumber      Int
  owner          User?    @relation(fields: [ownerId], references: [id])
  ownerId        String?  @db.Uuid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id            String   @id @default(uuid()) @db.Uuid
  comment       String
  cleanliness   Int
  accuracy      Int
  checkIn       Int
  communication Int
  location      Int
  value         Int
  overallRating Int
  room          Room     @relation(fields: [roomId], references: [id])
  roomId        String   @db.Uuid
  author        User?    @relation(fields: [authorId], references: [id])
  authorId      String?  @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
